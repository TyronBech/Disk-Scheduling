      ******************************************************************
      * Author:
      * Date:
      * Purpose:
      * Tectonics: cobc
      ******************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. C-SCAN-DISK-ALGORITHM.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 WS-NO-PROC PIC 9(2) VALUE ZEROES.
       01 WS-START PIC 9(3) VALUE ZEROES.
       01 WS-PREV PIC 9(3) VALUE ZEROES.
       01 I PIC 9(3) VALUE ZEROES.
       01 J PIC 9(3) VALUE ZEROES.
       01 TEMP PIC 9(3) VALUE ZEROES.
       01 WS-START-IDX PIC 9(3) VALUE ZEROES.
       01 WS-THM PIC 9(4) VALUE ZEROES.
       01 WS-HEAD-M PIC 9(4) VALUE ZEROES.
       01 WS-P1S PIC 9(3) VALUE ZEROES.
       01 WS-P2S PIC 9(3) VALUE ZEROES.
       01 WS-ALPHA PIC 9(3) VALUE ZEROES.
       01 WS-CYLINDER PIC 9(3) VALUE ZEROES.
       01 WS-PROCESSES OCCURS 0 TO 100 DEPENDING ON WS-NO-PROC.
         02 WS-PROC PIC 9(3) VALUE ZEROES.
       01 WS-PR PIC 9(3) VALUE ZEROES.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           DISPLAY "C-SCAN DISK ALGORITHM".
      *    GETTING THE NUMBER OF CYLINDERS
           DISPLAY "ENTER NUMBER OF CYLINDERS: " WITH NO ADVANCING.
           ACCEPT WS-CYLINDER.
           MOVE WS-CYLINDER TO WS-START.
           MOVE WS-CYLINDER TO WS-PREV.
      *    GETTING THE ALPHA USED FOR COMPUTATION
           MOVE WS-CYLINDER TO WS-ALPHA.
      *    SUBTRACTING 1 TO CYLINDER TO INCLUDE THE 0 TO THE COUNT
           SUBTRACT 1 FROM WS-CYLINDER.
      *    GETTING THE NUMBER OF WS-PROCESSES
           DISPLAY "ENTER NO. OF PROCESS: " WITH NO ADVANCING.
           ACCEPT WS-NO-PROC.
      *    ADDING 3 TO THE NUMBER OF PROCESSES TO INCLUDE THE STARTING
      *    POSISTION, 0 CYLINDER, AND WS-CYLINDER - 1
           ADD 3 TO WS-NO-PROC.
      *    MOVING THE LAST CYLINDER TO THE PROCESSES
           MOVE WS-CYLINDER TO WS-PROCESSES(WS-NO-PROC).
      *    GETTING THE STARTING POINT OF THE PROCESS
           PERFORM UNTIL WS-START < WS-CYLINDER
             DISPLAY "ENTER THE STARTING POINT: " WITH NO ADVANCING
             ACCEPT WS-START
             IF WS-START > WS-CYLINDER
               DISPLAY "YOU EXCEED THE SIZE OF CYLINDER"
             END-IF
           END-PERFORM.
      *    GETTING THE PREVIOUS LOCATION OF THE HEAD
           PERFORM UNTIL WS-PREV < WS-CYLINDER
             DISPLAY "ENTER PREVIOUS POSITION: " WITH NO ADVANCING
             ACCEPT WS-PREV
             IF WS-PREV > WS-CYLINDER
               DISPLAY "YOU EXCEED THE SIZE OF CYLINDER"
             END-IF
           END-PERFORM.
      *    MOVING 0 TO THE PROCESS TO INCLUDE THE CYLINDER 0 IN THE
      *    COMPUTATION
           MOVE ZERO TO WS-PROCESSES(1).
      *    MOVING THE STARTING POSISTION TO THE PROCESSES
           MOVE WS-START TO WS-PROCESSES(2).
      *    GETTING THE INPUTS
           PERFORM VARYING I FROM 3 BY 1 UNTIL I > WS-NO-PROC - 1
             DISPLAY "ENTER A PROCESS: " WITH NO ADVANCING
             ACCEPT WS-PR
             IF WS-PR > WS-CYLINDER THEN
               DISPLAY "YOU EXCEED THE SIZE OF CYLINDER"
               SUBTRACT 1 FROM I
             ELSE
      *        MOVING THE INPUT TO THE TABLE
               MOVE WS-PR TO WS-PROCESSES(I)
             END-IF
           END-PERFORM.
      *    SORTING THE TABLE ASCENDINGLY
           PERFORM BUBBLE-SORT.
      *    FINDING THE STARTING POSITION FROM THE SORTED TABLE
           PERFORM FIND-START.
      *    CHECKING FOR THE DIRECTION OF THE HEAD IF IT IS LOWER
      *    OR HIGHER
           IF WS-PREV > WS-START THEN
             PERFORM HILO
           ELSE
             PERFORM LOHI
           END-IF.
           STOP RUN.
      * HILO PARAGRAPH STARTING FROM THE STARTING POSITION TO THE
      * CYLINDER 0 THEN FROM THE MAX CYLINDER TO THE REQUEST NEXT
      * TO THE STARTING POSITION
       HILO.
      *    LOOPING FROM THE STARTING POSITION UNTIL CYLINDER 0
           PERFORM VARYING I FROM WS-START-IDX BY -1 UNTIL I < 2
      *      MOVING THE ELEMENTS TO THE P1S AND P2S
             MOVE WS-PROCESSES(I) TO WS-P1S
             MOVE WS-PROCESSES(I - 1) TO WS-P2S
      *      COMPUTING FOR THE HEAD MOVEMENT
             COMPUTE WS-HEAD-M = WS-P1S - WS-P2S
      *      DISPLAYING THE HEAD MOVEMENT
             DISPLAY "HEAD MOVEMENT: " WS-HEAD-M
      *      ADDING THE HEAD MOVEMENT TO THE TOTAL HEAD MOVEMENT
             COMPUTE WS-THM = WS-THM + WS-HEAD-M
           END-PERFORM.
           IF WS-START-IDX >= WS-NO-PROC THEN
             EXIT
           END-IF.
      *    ADDING THE ALPHA TO THE TOTAL HEAD MOVEMENT
           COMPUTE WS-THM = WS-THM + WS-ALPHA.
      *    LOOPING FROM THE MAX CYLINDER UNTIL THE NEXT REQUEST
      *    AFTER THE STARTING POSITION
           PERFORM VARYING I FROM WS-NO-PROC BY -1 UNTIL I <=
           WS-START-IDX + 1
      *      MOVING THE ELEMENTS TO THE P1S AND P2S
               MOVE WS-PROCESSES(I) TO WS-P1S
               MOVE WS-PROCESSES(I - 1) TO WS-P2S
      *      COMPUTING FOR THE HEAD MOVEMENT
             COMPUTE WS-HEAD-M = WS-P1S - WS-P2S
      *      DISPLAYING THE HEAD MOVEMENT
             DISPLAY "HEAD MOVEMENT: " WS-HEAD-M
      *      ADDING THE HEAD MOVEMENT TO THE TOTAL HEAD MOVEMENT
             COMPUTE WS-THM = WS-THM + WS-HEAD-M
           END-PERFORM.
      *    DISPLAYING THE TOTAL HEAD MOVEMENT
           DISPLAY "THM: " WS-THM.
           EXIT.
      * HILO PARAGRAPH STARTING FROM THE STARTING POSITION TO THE
      * MAX CYLINDER THEN FROM THE CYLINDER 0 TO THE REQUEST NEXT
      * TO THE STARTING POSITION
       LOHI.
      *    LOOPING FROM THE STARTING INDEX UP TO THE MAX CYLINDER
           PERFORM VARYING I FROM WS-START-IDX BY 1 UNTIL I >=
           WS-NO-PROC
      *      MOVING THE ELEMENTS TO THE P1S AND P2S
             MOVE WS-PROCESSES(I + 1) TO WS-P1S
             MOVE WS-PROCESSES(I) TO WS-P2S
      *      COMPUTING FOR THE HEAD MOVEMENT
             COMPUTE WS-HEAD-M = WS-P1S - WS-P2S
      *      DISPLAYING THE HEAD MOVEMENT
             DISPLAY "HEAD MOVEMENT: " WS-HEAD-M
      *      ADDING THE HEAD MOVEMENT TO THE TOTAL HEAD MOVEMENT
             COMPUTE WS-THM = WS-THM + WS-HEAD-M
           END-PERFORM.
           IF WS-START-IDX <= 1 THEN
             EXIT
           END-IF.
      *    ADDING THE ALPHA TO THE TOTAL HEAD MOVEMENT
           COMPUTE WS-THM = WS-THM + WS-ALPHA.
      *    LOOPING FROM THE CYLINDER 0 UP TO THE NEXT REQUEST
      *    BEFORE THE STARTING INDEX
           PERFORM VARYING I FROM 1 BY 1 UNTIL I >=
           WS-START-IDX - 1
      *      MOVING THE ELEMENTS TO THE P1S AND P2S
             MOVE WS-PROCESSES(I  + 1) TO WS-P1S
             MOVE WS-PROCESSES(I) TO WS-P2S
      *      GETTING THE HEAD MOVEMENT
             COMPUTE WS-HEAD-M = WS-P1S - WS-P2S
      *      DISPLAYING THE HEAD MOVEMENT
             DISPLAY "HEAD MOVEMENT: " WS-HEAD-M
      *      ADDING THE HEAD MOVEMENT TO THE TOTAL HEAD MOVEMENT
             COMPUTE WS-THM = WS-THM + WS-HEAD-M
           END-PERFORM.
      *    DISPLAYING THE TOTAL HEAD MOVEMENT
           DISPLAY "THM: " WS-THM.
           EXIT.
      * BUBBLE SORT PARAGRAPH
       BUBBLE-SORT.
           PERFORM VARYING I FROM 1 BY 1 UNTIL I >= WS-NO-PROC
             PERFORM VARYING J FROM 1 BY 1 UNTIL J > (WS-NO-PROC - I)
               IF WS-PROCESSES(J) > WS-PROCESSES(j + 1) THEN
                 MOVE WS-PROCESSES(J) TO TEMP
                 MOVE WS-PROCESSES(J + 1) TO WS-PROCESSES(J)
                 MOVE TEMP TO WS-PROCESSES(J + 1)
               END-IF
             END-PERFORM
           END-PERFORM.
           EXIT.
      * FIND START PARAGRAPH
       FIND-START.
      *    LOOPING TO FIND THE STARTING HEAD OF THE LOOK ALGORITHM
           PERFORM VARYING I FROM 1 BY 1 UNTIL I >= WS-NO-PROC
             IF WS-PROCESSES(I) IS EQUAL TO WS-START
               MOVE I TO WS-START-IDX
             END-IF
           END-PERFORM.
           EXIT.
       END PROGRAM C-SCAN-DISK-ALGORITHM.
